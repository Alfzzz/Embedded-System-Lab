
lab6.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00002008  80000000  80000000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rela.got     00000000  80002008  80002008  00002408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000002c8  80002008  80002008  00002408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .exception    00000200  80002400  80002400  00002800  2**9
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       000000a0  80002600  80002600  00002a00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .dalign       00000004  00000004  00000004  00000000  2**0
                  ALLOC
  6 .bss          000000f0  00000008  00000008  00000000  2**2
                  ALLOC
  7 .heap         0000ef08  000000f8  000000f8  00000000  2**0
                  ALLOC
  8 .comment      00000030  00000000  00000000  00002aa0  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 000001c8  00000000  00000000  00002ad0  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_pubnames 000003c1  00000000  00000000  00002c98  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_info   00001412  00000000  00000000  00003059  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 0000056e  00000000  00000000  0000446b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000018cf  00000000  00000000  000049d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000002bc  00000000  00000000  000062a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000008cf  00000000  00000000  00006564  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    00000498  00000000  00000000  00006e33  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macinfo 002cbdb6  00000000  00000000  000072cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .stack        00001000  0000f000  0000f000  00000000  2**0
                  ALLOC
 19 .debug_ranges 00000198  00000000  00000000  002d3088  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .reset:

80000000 <_start>:

  .global _start
  .type _start, @function
_start:
  // Jump to the C runtime startup routine.
  lda.w   pc, _stext
80000000:	fe cf df 70 	sub	pc,pc,-8336

80000004 <_trampoline>:
80000004:	e0 8f 10 00 	bral	80002004 <program_start>
	...

80002004 <program_start>:
  rjmp    program_start

  .org  PROGRAM_START_OFFSET
program_start:
  // Jump to the C runtime startup routine.
  lda.w   pc, _stext
80002004:	fe cf ff 74 	sub	pc,pc,-140

Disassembly of section .text:

80002008 <gpio_get_pin_value>:
80002008:	f8 08 16 05 	lsr	r8,r12,0x5
 *
 * \return The pin value.
 */
bool gpio_get_pin_value(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
8000200c:	a9 68       	lsl	r8,0x8
8000200e:	e0 28 f0 00 	sub	r8,61440
	
	return (gpio_port->pvr >> (pin & 0x1F)) & 1;
80002012:	71 88       	ld.w	r8,r8[0x60]
80002014:	f0 0c 0a 4c 	lsr	r12,r8,r12
}
80002018:	f9 dc c0 01 	bfextu	r12,r12,0x0,0x1
8000201c:	5e fc       	retal	r12

8000201e <gpio_set_gpio_pin>:
 *
 * \param pin The pin number.
 */
void gpio_set_gpio_pin(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
8000201e:	f8 08 16 05 	lsr	r8,r12,0x5
80002022:	a9 68       	lsl	r8,0x8
80002024:	e0 28 f0 00 	sub	r8,61440
	
	/* Value to be driven on the I/O line: 1. */
	gpio_port->ovrs  = 1 << (pin & 0x1F);
80002028:	30 19       	mov	r9,1
8000202a:	f2 0c 09 4c 	lsl	r12,r9,r12
8000202e:	f1 4c 00 54 	st.w	r8[84],r12
	/* The GPIO output driver is enabled for that pin. */ 
	gpio_port->oders = 1 << (pin & 0x1F);
80002032:	f1 4c 00 44 	st.w	r8[68],r12
	/* The GPIO module controls that pin. */
	gpio_port->gpers = 1 << (pin & 0x1F);
80002036:	91 1c       	st.w	r8[0x4],r12
}
80002038:	5e fc       	retal	r12

8000203a <gpio_clr_gpio_pin>:
 *
 * \param pin The pin number.
 */
void gpio_clr_gpio_pin(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
8000203a:	f8 08 16 05 	lsr	r8,r12,0x5
8000203e:	a9 68       	lsl	r8,0x8
80002040:	e0 28 f0 00 	sub	r8,61440
	
	/* Value to be driven on the I/O line: 0. */
	gpio_port->ovrc  = 1 << (pin & 0x1F);
80002044:	30 19       	mov	r9,1
80002046:	f2 0c 09 4c 	lsl	r12,r9,r12
8000204a:	f1 4c 00 58 	st.w	r8[88],r12
	/* The GPIO output driver is enabled for that pin. */
	gpio_port->oders = 1 << (pin & 0x1F);
8000204e:	f1 4c 00 44 	st.w	r8[68],r12
	/* The GPIO module controls that pin. */
	gpio_port->gpers = 1 << (pin & 0x1F);
80002052:	91 1c       	st.w	r8[0x4],r12
}
80002054:	5e fc       	retal	r12
80002056:	d7 03       	nop

80002058 <_get_interrupt_handler>:
__int_handler _get_interrupt_handler(uint32_t int_level)
{
	/* ICR3 is mapped first, ICR0 last.
	Code in exception.S puts int_level in R12 which is used by the compiler
	to pass a single argument to a function. */
	uint32_t int_grp = AVR32_INTC.icr[AVR32_INTC_INT3 - int_level];
80002058:	fe 78 08 00 	mov	r8,-63488
8000205c:	e0 69 00 83 	mov	r9,131
80002060:	f2 0c 01 0c 	sub	r12,r9,r12
80002064:	f0 0c 03 29 	ld.w	r9,r8[r12<<0x2]
	uint32_t int_req = AVR32_INTC.irr[int_grp];
80002068:	f2 ca ff c0 	sub	r10,r9,-64
8000206c:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
80002070:	58 08       	cp.w	r8,0
80002072:	c0 21       	brne	80002076 <_get_interrupt_handler+0x1e>
80002074:	5e fd       	retal	0
		? _int_handler_table[int_grp]._int_line_handler_table[32
			- clz(int_req) - 1]
80002076:	f0 08 12 00 	clz	r8,r8
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
		? _int_handler_table[int_grp]._int_line_handler_table[32
8000207a:	48 5a       	lddpc	r10,8000208c <_get_interrupt_handler+0x34>
8000207c:	f4 09 00 39 	add	r9,r10,r9<<0x3
80002080:	f0 08 11 1f 	rsub	r8,r8,31
80002084:	72 19       	ld.w	r9,r9[0x4]
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
80002086:	f2 08 03 2c 	ld.w	r12,r9[r8<<0x2]
		? _int_handler_table[int_grp]._int_line_handler_table[32
			- clz(int_req) - 1]
		: NULL;
}
8000208a:	5e fc       	retal	r12
8000208c:	80 00       	ld.sh	r0,r0[0x0]
8000208e:	26 00       	sub	r0,96

80002090 <_stext>:

  .global _stext
  .type _stext, @function
_stext:
  // Set initial stack pointer.
  lda.w   sp, _estack
80002090:	e0 7d 00 00 	mov	sp,65536

  // Set up EVBA so interrupts can be enabled.
  lda.w   r0, _evba
  mtsr    AVR32_EVBA, r0
80002094:	fe c0 fc 94 	sub	r0,pc,-876

  // Enable the exception processing.
  csrf    AVR32_SR_EM_OFFSET
80002098:	e3 b0 00 01 	mtsr	0x4,r0

  // Load initialized data having a global lifetime from the data LMA.
  lda.w   r0, _data
  lda.w   r1, _edata
8000209c:	d5 53       	csrf	0x15
  cp      r0, r1
8000209e:	30 80       	mov	r0,8
  brhs    idata_load_loop_end
800020a0:	30 81       	mov	r1,8
  lda.w   r2, _data_lma
800020a2:	02 30       	cp.w	r0,r1
idata_load_loop:
  ld.d    r4, r2++
800020a4:	c0 72       	brcc	800020b2 <idata_load_loop_end>
  st.d    r0++, r4
800020a6:	fe c2 fa 06 	sub	r2,pc,-1530

800020aa <idata_load_loop>:
  cp      r0, r1
  brlo    idata_load_loop
800020aa:	a5 05       	ld.d	r4,r2++
idata_load_loop_end:

  // Clear uninitialized data having a global lifetime in the blank static storage section.
  lda.w   r0, __bss_start
800020ac:	a1 24       	st.d	r0++,r4
  lda.w   r1, _end
800020ae:	02 30       	cp.w	r0,r1
  cp      r0, r1
800020b0:	cf d3       	brcs	800020aa <idata_load_loop>

800020b2 <idata_load_loop_end>:
  brhs    udata_clear_loop_end
800020b2:	30 80       	mov	r0,8
  mov     r2, 0
800020b4:	e0 61 00 f8 	mov	r1,248
  mov     r3, 0
udata_clear_loop:
  st.d    r0++, r2
800020b8:	02 30       	cp.w	r0,r1
  cp      r0, r1
800020ba:	c0 62       	brcc	800020c6 <udata_clear_loop_end>
  brlo    udata_clear_loop
800020bc:	30 02       	mov	r2,0
  // Safety: Set the default "return" @ to the exit routine address.
  lda.w   lr, exit
#endif

  // Start the show.
  lda.w   pc, main
800020be:	30 03       	mov	r3,0

800020c0 <udata_clear_loop>:
800020c0:	a1 22       	st.d	r0++,r2
800020c2:	02 30       	cp.w	r0,r1
800020c4:	cf e3       	brcs	800020c0 <udata_clear_loop>

800020c6 <udata_clear_loop_end>:
800020c6:	fe cf ff ca 	sub	pc,pc,-54
800020ca:	d7 03       	nop

800020cc <DecimalToBinary>:
	}
}

//Función para convertir decimal a binario
void DecimalToBinary (int binary[4], int numero){
	binary[0] = 0;
800020cc:	30 08       	mov	r8,0
800020ce:	99 08       	st.w	r12[0x0],r8
	binary[1] = 0;
800020d0:	99 18       	st.w	r12[0x4],r8
	binary[2] = 0;
800020d2:	99 28       	st.w	r12[0x8],r8
	binary[3] = 0;
800020d4:	2f 4c       	sub	r12,-12
800020d6:	99 08       	st.w	r12[0x0],r8
	int j = 0;
	while (numero>0){
800020d8:	58 0b       	cp.w	r11,0
800020da:	5e ac       	retle	r12
		binary [3-j] = numero%2;
800020dc:	f6 08 16 1f 	lsr	r8,r11,0x1f
800020e0:	f6 08 00 09 	add	r9,r11,r8
800020e4:	f3 d9 c0 01 	bfextu	r9,r9,0x0,0x1
800020e8:	10 19       	sub	r9,r8
800020ea:	99 09       	st.w	r12[0x0],r9
		numero = numero/2;
800020ec:	f0 0b 00 0b 	add	r11,r8,r11
800020f0:	a1 5b       	asr	r11,0x1
800020f2:	20 4c       	sub	r12,4
	binary[0] = 0;
	binary[1] = 0;
	binary[2] = 0;
	binary[3] = 0;
	int j = 0;
	while (numero>0){
800020f4:	58 0b       	cp.w	r11,0
800020f6:	fe 99 ff f3 	brgt	800020dc <DecimalToBinary+0x10>
800020fa:	5e fc       	retal	r12

800020fc <main>:
//*************************************************************************************************
//Actividad 1

void DecimalToBinary (int binary[4], int numero);//Convertidor decimal a binario

int main(void){
800020fc:	d4 31       	pushm	r0-r7,lr
800020fe:	20 9d       	sub	sp,36
80002100:	fa c8 ff dc 	sub	r8,sp,-36
80002104:	50 08       	stdsp	sp[0x0],r8
	while(1){
		int numeros [4] = {0 ,0 ,0 ,0}; //Arreglo de los 4 números.
		int binary [4] = {0 ,0 ,0 ,0};//Arreglo de cuatro bits
		
		for (int i = 0; i < 4; i++){
			while (gpio_get_pin_value(QT1081_TOUCH_SENSOR_ENTER) == false){ //Selección de número
80002106:	33 a4       	mov	r4,58
				}
				else{
					gpio_clr_gpio_pin(LED3_GPIO);
				}
				
				if (gpio_get_pin_value(QT1081_TOUCH_SENSOR_RIGHT) == true) {//Incrementar si se presionó tecla "RIGHT"
80002108:	33 87       	mov	r7,56
		int numeros [4] = {0 ,0 ,0 ,0}; //Arreglo de los 4 números.
		int binary [4] = {0 ,0 ,0 ,0};//Arreglo de cuatro bits
		
		for (int i = 0; i < 4; i++){
			while (gpio_get_pin_value(QT1081_TOUCH_SENSOR_ENTER) == false){ //Selección de número
				DecimalToBinary(binary,numeros[i]);//Convertir el valor decimal a binario
8000210a:	fa c2 ff fc 	sub	r2,sp,-4

void DecimalToBinary (int binary[4], int numero);//Convertidor decimal a binario

int main(void){
	while(1){
		int numeros [4] = {0 ,0 ,0 ,0}; //Arreglo de los 4 números.
8000210e:	30 08       	mov	r8,0
80002110:	50 58       	stdsp	sp[0x14],r8
80002112:	50 68       	stdsp	sp[0x18],r8
80002114:	50 78       	stdsp	sp[0x1c],r8
80002116:	50 88       	stdsp	sp[0x20],r8
		int binary [4] = {0 ,0 ,0 ,0};//Arreglo de cuatro bits
80002118:	50 18       	stdsp	sp[0x4],r8
8000211a:	50 28       	stdsp	sp[0x8],r8
8000211c:	50 38       	stdsp	sp[0xc],r8
8000211e:	50 48       	stdsp	sp[0x10],r8
80002120:	fa c5 ff ec 	sub	r5,sp,-20
						numeros[i] = 15;
					}
					while(gpio_get_pin_value(QT1081_TOUCH_SENSOR_RIGHT) == true){//Esperar a que se suelte la tecla "RIGHT"
					}		
				}
				if (gpio_get_pin_value(QT1081_TOUCH_SENSOR_LEFT) == true) {//Decrementar si se presionó tecla "LEFT"
80002124:	33 93       	mov	r3,57
				}
				if (binary[3] == 0){
					gpio_set_gpio_pin(LED3_GPIO);
				}
				else{
					gpio_clr_gpio_pin(LED3_GPIO);
80002126:	30 61       	mov	r1,6
				}
				if (binary[2] == 0){
					gpio_set_gpio_pin(LED2_GPIO);
				}
				else{
					gpio_clr_gpio_pin(LED2_GPIO);
80002128:	30 50       	mov	r0,5
8000212a:	c4 b8       	rjmp	800021c0 <main+0xc4>
		int numeros [4] = {0 ,0 ,0 ,0}; //Arreglo de los 4 números.
		int binary [4] = {0 ,0 ,0 ,0};//Arreglo de cuatro bits
		
		for (int i = 0; i < 4; i++){
			while (gpio_get_pin_value(QT1081_TOUCH_SENSOR_ENTER) == false){ //Selección de número
				DecimalToBinary(binary,numeros[i]);//Convertir el valor decimal a binario
8000212c:	6a 06       	ld.w	r6,r5[0x0]
8000212e:	0c 9b       	mov	r11,r6
80002130:	04 9c       	mov	r12,r2
80002132:	f0 1f 00 64 	mcall	800022c0 <main+0x1c4>
				
				//Mostrar los  4 bits en LED3|LED2|LED1|LED0
				if (binary[0] == 0){
80002136:	40 18       	lddsp	r8,sp[0x4]
80002138:	58 08       	cp.w	r8,0
8000213a:	c0 51       	brne	80002144 <main+0x48>
					gpio_set_gpio_pin(LED0_GPIO); 
8000213c:	33 bc       	mov	r12,59
8000213e:	f0 1f 00 62 	mcall	800022c4 <main+0x1c8>
80002142:	c0 48       	rjmp	8000214a <main+0x4e>
				}
				else{
					gpio_clr_gpio_pin(LED0_GPIO);
80002144:	33 bc       	mov	r12,59
80002146:	f0 1f 00 61 	mcall	800022c8 <main+0x1cc>
				}
				if (binary[1] == 0){
8000214a:	40 28       	lddsp	r8,sp[0x8]
8000214c:	58 08       	cp.w	r8,0
8000214e:	c0 51       	brne	80002158 <main+0x5c>
					gpio_set_gpio_pin(LED1_GPIO);
80002150:	33 cc       	mov	r12,60
80002152:	f0 1f 00 5d 	mcall	800022c4 <main+0x1c8>
80002156:	c0 48       	rjmp	8000215e <main+0x62>
				}
				else{
					gpio_clr_gpio_pin(LED1_GPIO);
80002158:	33 cc       	mov	r12,60
8000215a:	f0 1f 00 5c 	mcall	800022c8 <main+0x1cc>
				}
				if (binary[2] == 0){
8000215e:	40 38       	lddsp	r8,sp[0xc]
80002160:	58 08       	cp.w	r8,0
80002162:	c0 51       	brne	8000216c <main+0x70>
					gpio_set_gpio_pin(LED2_GPIO);
80002164:	00 9c       	mov	r12,r0
80002166:	f0 1f 00 58 	mcall	800022c4 <main+0x1c8>
8000216a:	c0 48       	rjmp	80002172 <main+0x76>
				}
				else{
					gpio_clr_gpio_pin(LED2_GPIO);
8000216c:	00 9c       	mov	r12,r0
8000216e:	f0 1f 00 57 	mcall	800022c8 <main+0x1cc>
				}
				if (binary[3] == 0){
80002172:	40 48       	lddsp	r8,sp[0x10]
80002174:	58 08       	cp.w	r8,0
80002176:	c0 51       	brne	80002180 <main+0x84>
					gpio_set_gpio_pin(LED3_GPIO);
80002178:	02 9c       	mov	r12,r1
8000217a:	f0 1f 00 53 	mcall	800022c4 <main+0x1c8>
8000217e:	c0 48       	rjmp	80002186 <main+0x8a>
				}
				else{
					gpio_clr_gpio_pin(LED3_GPIO);
80002180:	02 9c       	mov	r12,r1
80002182:	f0 1f 00 52 	mcall	800022c8 <main+0x1cc>
				}
				
				if (gpio_get_pin_value(QT1081_TOUCH_SENSOR_RIGHT) == true) {//Incrementar si se presionó tecla "RIGHT"
80002186:	0e 9c       	mov	r12,r7
80002188:	f0 1f 00 51 	mcall	800022cc <main+0x1d0>
8000218c:	c0 a0       	breq	800021a0 <main+0xa4>
					numeros[i]++;
8000218e:	2f f6       	sub	r6,-1
					if(numeros[i] >= 15){//Limitar el valor máximo a 15
						numeros[i] = 15;
80002190:	58 f6       	cp.w	r6,15
80002192:	f9 b6 04 0f 	movge	r6,15
80002196:	8b 06       	st.w	r5[0x0],r6
					}
					while(gpio_get_pin_value(QT1081_TOUCH_SENSOR_RIGHT) == true){//Esperar a que se suelte la tecla "RIGHT"
80002198:	0e 9c       	mov	r12,r7
8000219a:	f0 1f 00 4d 	mcall	800022cc <main+0x1d0>
8000219e:	cf d1       	brne	80002198 <main+0x9c>
					}		
				}
				if (gpio_get_pin_value(QT1081_TOUCH_SENSOR_LEFT) == true) {//Decrementar si se presionó tecla "LEFT"
800021a0:	06 9c       	mov	r12,r3
800021a2:	f0 1f 00 4b 	mcall	800022cc <main+0x1d0>
800021a6:	c0 d0       	breq	800021c0 <main+0xc4>
					if(numeros[i] == 0){//Limitar el valor mínimo a 0
800021a8:	6a 08       	ld.w	r8,r5[0x0]
						numeros[i] = 0;
800021aa:	58 08       	cp.w	r8,0
800021ac:	eb f8 0a 00 	st.weq	r5[0x0],r8
					}
					else{
						numeros[i]--;
800021b0:	f7 b8 01 01 	subne	r8,1
800021b4:	eb f8 1a 00 	st.wne	r5[0x0],r8
					}
					while(gpio_get_pin_value(QT1081_TOUCH_SENSOR_LEFT) == true){//Esperar a que se suelte tecla "LEFT"
800021b8:	06 9c       	mov	r12,r3
800021ba:	f0 1f 00 45 	mcall	800022cc <main+0x1d0>
800021be:	cf d1       	brne	800021b8 <main+0xbc>
	while(1){
		int numeros [4] = {0 ,0 ,0 ,0}; //Arreglo de los 4 números.
		int binary [4] = {0 ,0 ,0 ,0};//Arreglo de cuatro bits
		
		for (int i = 0; i < 4; i++){
			while (gpio_get_pin_value(QT1081_TOUCH_SENSOR_ENTER) == false){ //Selección de número
800021c0:	08 9c       	mov	r12,r4
800021c2:	f0 1f 00 43 	mcall	800022cc <main+0x1d0>
800021c6:	cb 30       	breq	8000212c <main+0x30>
					}
					while(gpio_get_pin_value(QT1081_TOUCH_SENSOR_LEFT) == true){//Esperar a que se suelte tecla "LEFT"
					}
				}
			}
			while (gpio_get_pin_value(QT1081_TOUCH_SENSOR_ENTER) == true){//Esperar a que se suelte tecla "ENTER"
800021c8:	08 9c       	mov	r12,r4
800021ca:	f0 1f 00 41 	mcall	800022cc <main+0x1d0>
800021ce:	cf d1       	brne	800021c8 <main+0xcc>
800021d0:	2f c5       	sub	r5,-4
int main(void){
	while(1){
		int numeros [4] = {0 ,0 ,0 ,0}; //Arreglo de los 4 números.
		int binary [4] = {0 ,0 ,0 ,0};//Arreglo de cuatro bits
		
		for (int i = 0; i < 4; i++){
800021d2:	40 08       	lddsp	r8,sp[0x0]
800021d4:	10 35       	cp.w	r5,r8
800021d6:	cf 51       	brne	800021c0 <main+0xc4>
			while (gpio_get_pin_value(QT1081_TOUCH_SENSOR_ENTER) == true){//Esperar a que se suelte tecla "ENTER"
			}
		}
		
		while(1){
			if (gpio_get_pin_value(QT1081_TOUCH_SENSOR_UP) == true){//Operación AND
800021d8:	33 66       	mov	r6,54
				else{
					gpio_clr_gpio_pin(LED3_GPIO);
				}
				break;
			}
			else if (gpio_get_pin_value(QT1081_TOUCH_SENSOR_DOWN) == true){//Operación OR 
800021da:	33 75       	mov	r5,55
			while (gpio_get_pin_value(QT1081_TOUCH_SENSOR_ENTER) == true){//Esperar a que se suelte tecla "ENTER"
			}
		}
		
		while(1){
			if (gpio_get_pin_value(QT1081_TOUCH_SENSOR_UP) == true){//Operación AND
800021dc:	0c 9c       	mov	r12,r6
800021de:	f0 1f 00 3c 	mcall	800022cc <main+0x1d0>
800021e2:	c3 40       	breq	8000224a <main+0x14e>
				int variableAND = (numeros[0]&numeros[1]&numeros[2]&numeros[3]);
				DecimalToBinary(binary,variableAND);//Convertir el resultado a binario
800021e4:	40 58       	lddsp	r8,sp[0x14]
800021e6:	40 6b       	lddsp	r11,sp[0x18]
800021e8:	10 6b       	and	r11,r8
800021ea:	40 78       	lddsp	r8,sp[0x1c]
800021ec:	10 6b       	and	r11,r8
800021ee:	40 88       	lddsp	r8,sp[0x20]
800021f0:	10 6b       	and	r11,r8
800021f2:	04 9c       	mov	r12,r2
800021f4:	f0 1f 00 33 	mcall	800022c0 <main+0x1c4>
				//Mostrar los  4 bits en LED3|LED2|LED1|LED0
				if (binary[0] == 0){
800021f8:	40 18       	lddsp	r8,sp[0x4]
800021fa:	58 08       	cp.w	r8,0
800021fc:	c0 51       	brne	80002206 <main+0x10a>
					gpio_set_gpio_pin(LED0_GPIO);
800021fe:	33 bc       	mov	r12,59
80002200:	f0 1f 00 31 	mcall	800022c4 <main+0x1c8>
80002204:	c0 48       	rjmp	8000220c <main+0x110>
				}
				else{
					gpio_clr_gpio_pin(LED0_GPIO);
80002206:	33 bc       	mov	r12,59
80002208:	f0 1f 00 30 	mcall	800022c8 <main+0x1cc>
				}
				if (binary[1] == 0){
8000220c:	40 28       	lddsp	r8,sp[0x8]
8000220e:	58 08       	cp.w	r8,0
80002210:	c0 51       	brne	8000221a <main+0x11e>
					gpio_set_gpio_pin(LED1_GPIO);
80002212:	33 cc       	mov	r12,60
80002214:	f0 1f 00 2c 	mcall	800022c4 <main+0x1c8>
80002218:	c0 48       	rjmp	80002220 <main+0x124>
				}
				else{
					gpio_clr_gpio_pin(LED1_GPIO);
8000221a:	33 cc       	mov	r12,60
8000221c:	f0 1f 00 2b 	mcall	800022c8 <main+0x1cc>
				}
				if (binary[2] == 0){
80002220:	40 38       	lddsp	r8,sp[0xc]
80002222:	58 08       	cp.w	r8,0
80002224:	c0 51       	brne	8000222e <main+0x132>
					gpio_set_gpio_pin(LED2_GPIO);
80002226:	30 5c       	mov	r12,5
80002228:	f0 1f 00 27 	mcall	800022c4 <main+0x1c8>
8000222c:	c0 48       	rjmp	80002234 <main+0x138>
				}
				else{
					gpio_clr_gpio_pin(LED2_GPIO);
8000222e:	30 5c       	mov	r12,5
80002230:	f0 1f 00 26 	mcall	800022c8 <main+0x1cc>
				}
				if (binary[3] == 0){
80002234:	40 48       	lddsp	r8,sp[0x10]
80002236:	58 08       	cp.w	r8,0
80002238:	c0 51       	brne	80002242 <main+0x146>
					gpio_set_gpio_pin(LED3_GPIO);
8000223a:	30 6c       	mov	r12,6
8000223c:	f0 1f 00 22 	mcall	800022c4 <main+0x1c8>
80002240:	c3 b8       	rjmp	800022b6 <main+0x1ba>
				}
				else{
					gpio_clr_gpio_pin(LED3_GPIO);
80002242:	30 6c       	mov	r12,6
80002244:	f0 1f 00 21 	mcall	800022c8 <main+0x1cc>
80002248:	c3 78       	rjmp	800022b6 <main+0x1ba>
				}
				break;
			}
			else if (gpio_get_pin_value(QT1081_TOUCH_SENSOR_DOWN) == true){//Operación OR 
8000224a:	0a 9c       	mov	r12,r5
8000224c:	f0 1f 00 20 	mcall	800022cc <main+0x1d0>
80002250:	cc 60       	breq	800021dc <main+0xe0>
				int variableOR = (numeros[0]|numeros[1]|numeros[2]|numeros[3]);//Convertir el resultado a binario
				//Mostrar los  4 bits en LED3|LED2|LED1|LED0
				DecimalToBinary(binary,variableOR);
80002252:	40 58       	lddsp	r8,sp[0x14]
80002254:	40 6b       	lddsp	r11,sp[0x18]
80002256:	10 4b       	or	r11,r8
80002258:	40 78       	lddsp	r8,sp[0x1c]
8000225a:	10 4b       	or	r11,r8
8000225c:	40 88       	lddsp	r8,sp[0x20]
8000225e:	10 4b       	or	r11,r8
80002260:	04 9c       	mov	r12,r2
80002262:	f0 1f 00 18 	mcall	800022c0 <main+0x1c4>
					if (binary[0] == 0){
80002266:	40 18       	lddsp	r8,sp[0x4]
80002268:	58 08       	cp.w	r8,0
8000226a:	c0 51       	brne	80002274 <main+0x178>
						gpio_set_gpio_pin(LED0_GPIO);
8000226c:	33 bc       	mov	r12,59
8000226e:	f0 1f 00 16 	mcall	800022c4 <main+0x1c8>
80002272:	c0 48       	rjmp	8000227a <main+0x17e>
					}
					else{
						gpio_clr_gpio_pin(LED0_GPIO);
80002274:	33 bc       	mov	r12,59
80002276:	f0 1f 00 15 	mcall	800022c8 <main+0x1cc>
					}
					if (binary[1] == 0){
8000227a:	40 28       	lddsp	r8,sp[0x8]
8000227c:	58 08       	cp.w	r8,0
8000227e:	c0 51       	brne	80002288 <main+0x18c>
						gpio_set_gpio_pin(LED1_GPIO);
80002280:	33 cc       	mov	r12,60
80002282:	f0 1f 00 11 	mcall	800022c4 <main+0x1c8>
80002286:	c0 48       	rjmp	8000228e <main+0x192>
					}
					else{
						gpio_clr_gpio_pin(LED1_GPIO);
80002288:	33 cc       	mov	r12,60
8000228a:	f0 1f 00 10 	mcall	800022c8 <main+0x1cc>
					}
					if (binary[2] == 0){
8000228e:	40 38       	lddsp	r8,sp[0xc]
80002290:	58 08       	cp.w	r8,0
80002292:	c0 51       	brne	8000229c <main+0x1a0>
						gpio_set_gpio_pin(LED2_GPIO);
80002294:	30 5c       	mov	r12,5
80002296:	f0 1f 00 0c 	mcall	800022c4 <main+0x1c8>
8000229a:	c0 48       	rjmp	800022a2 <main+0x1a6>
					}
					else{
						gpio_clr_gpio_pin(LED2_GPIO);
8000229c:	30 5c       	mov	r12,5
8000229e:	f0 1f 00 0b 	mcall	800022c8 <main+0x1cc>
					}
					if (binary[3] == 0){
800022a2:	40 48       	lddsp	r8,sp[0x10]
800022a4:	58 08       	cp.w	r8,0
800022a6:	c0 51       	brne	800022b0 <main+0x1b4>
						gpio_set_gpio_pin(LED3_GPIO);
800022a8:	30 6c       	mov	r12,6
800022aa:	f0 1f 00 07 	mcall	800022c4 <main+0x1c8>
800022ae:	c0 48       	rjmp	800022b6 <main+0x1ba>
					}
					else{
						gpio_clr_gpio_pin(LED3_GPIO);
800022b0:	30 6c       	mov	r12,6
800022b2:	f0 1f 00 06 	mcall	800022c8 <main+0x1cc>
					}
				break;
			}
		}
		while(gpio_get_pin_value(QT1081_TOUCH_SENSOR_ENTER) == false){	//Esperar a que se suelte tecla "ENTER" y volver a empezar
800022b6:	08 9c       	mov	r12,r4
800022b8:	f0 1f 00 05 	mcall	800022cc <main+0x1d0>
800022bc:	cf d0       	breq	800022b6 <main+0x1ba>
800022be:	c2 8b       	rjmp	8000210e <main+0x12>
800022c0:	80 00       	ld.sh	r0,r0[0x0]
800022c2:	20 cc       	sub	r12,12
800022c4:	80 00       	ld.sh	r0,r0[0x0]
800022c6:	20 1e       	sub	lr,1
800022c8:	80 00       	ld.sh	r0,r0[0x0]
800022ca:	20 3a       	sub	r10,3
800022cc:	80 00       	ld.sh	r0,r0[0x0]
800022ce:	20 08       	sub	r8,0

Disassembly of section .exception:

80002400 <_evba>:
_evba:

	.org  0x000
	// Unrecoverable Exception.
_handle_Unrecoverable_Exception:
	rjmp $
80002400:	c0 08       	rjmp	80002400 <_evba>
	...

80002404 <_handle_TLB_Multiple_Hit>:

	.org  0x004
	// TLB Multiple Hit.
_handle_TLB_Multiple_Hit:
	rjmp $
80002404:	c0 08       	rjmp	80002404 <_handle_TLB_Multiple_Hit>
	...

80002408 <_handle_Bus_Error_Data_Fetch>:

	.org  0x008
	// Bus Error Data Fetch.
_handle_Bus_Error_Data_Fetch:
	rjmp $
80002408:	c0 08       	rjmp	80002408 <_handle_Bus_Error_Data_Fetch>
	...

8000240c <_handle_Bus_Error_Instruction_Fetch>:

	.org  0x00C
	// Bus Error Instruction Fetch.
_handle_Bus_Error_Instruction_Fetch:
	rjmp $
8000240c:	c0 08       	rjmp	8000240c <_handle_Bus_Error_Instruction_Fetch>
	...

80002410 <_handle_NMI>:

	.org  0x010
	// NMI.
_handle_NMI:
	rjmp $
80002410:	c0 08       	rjmp	80002410 <_handle_NMI>
	...

80002414 <_handle_Instruction_Address>:

	.org  0x014
	// Instruction Address.
_handle_Instruction_Address:
	rjmp $
80002414:	c0 08       	rjmp	80002414 <_handle_Instruction_Address>
	...

80002418 <_handle_ITLB_Protection>:

	.org  0x018
	// ITLB Protection.
_handle_ITLB_Protection:
	rjmp $
80002418:	c0 08       	rjmp	80002418 <_handle_ITLB_Protection>
	...

8000241c <_handle_Breakpoint>:

	.org  0x01C
	// Breakpoint.
_handle_Breakpoint:
	rjmp $
8000241c:	c0 08       	rjmp	8000241c <_handle_Breakpoint>
	...

80002420 <_handle_Illegal_Opcode>:

	.org  0x020
	// Illegal Opcode.
_handle_Illegal_Opcode:
	rjmp $
80002420:	c0 08       	rjmp	80002420 <_handle_Illegal_Opcode>
	...

80002424 <_handle_Unimplemented_Instruction>:

	.org  0x024
	// Unimplemented Instruction.
_handle_Unimplemented_Instruction:
	rjmp $
80002424:	c0 08       	rjmp	80002424 <_handle_Unimplemented_Instruction>
	...

80002428 <_handle_Privilege_Violation>:

	.org  0x028
	// Privilege Violation.
_handle_Privilege_Violation:
	rjmp $
80002428:	c0 08       	rjmp	80002428 <_handle_Privilege_Violation>
	...

8000242c <_handle_Floating_Point>:

	.org  0x02C
	// Floating-Point: UNUSED IN AVR32UC and AVR32AP.
_handle_Floating_Point:
	rjmp $
8000242c:	c0 08       	rjmp	8000242c <_handle_Floating_Point>
	...

80002430 <_handle_Coprocessor_Absent>:

	.org  0x030
	// Coprocessor Absent: UNUSED IN AVR32UC.
_handle_Coprocessor_Absent:
	rjmp $
80002430:	c0 08       	rjmp	80002430 <_handle_Coprocessor_Absent>
	...

80002434 <_handle_Data_Address_Read>:

	.org  0x034
	// Data Address (Read).
_handle_Data_Address_Read:
	rjmp $
80002434:	c0 08       	rjmp	80002434 <_handle_Data_Address_Read>
	...

80002438 <_handle_Data_Address_Write>:

	.org  0x038
	// Data Address (Write).
_handle_Data_Address_Write:
	rjmp $
80002438:	c0 08       	rjmp	80002438 <_handle_Data_Address_Write>
	...

8000243c <_handle_DTLB_Protection_Read>:

	.org  0x03C
	// DTLB Protection (Read).
_handle_DTLB_Protection_Read:
	rjmp $
8000243c:	c0 08       	rjmp	8000243c <_handle_DTLB_Protection_Read>
	...

80002440 <_handle_DTLB_Protection_Write>:

	.org  0x040
	// DTLB Protection (Write).
_handle_DTLB_Protection_Write:
	rjmp $
80002440:	c0 08       	rjmp	80002440 <_handle_DTLB_Protection_Write>
	...

80002444 <_handle_DTLB_Modified>:

	.org  0x044
	// DTLB Modified: UNUSED IN AVR32UC.
_handle_DTLB_Modified:
	rjmp $
80002444:	c0 08       	rjmp	80002444 <_handle_DTLB_Modified>
	...

80002450 <_handle_ITLB_Miss>:

	.org  0x050
	// ITLB Miss.
_handle_ITLB_Miss:
	rjmp $
80002450:	c0 08       	rjmp	80002450 <_handle_ITLB_Miss>
	...

80002460 <_handle_DTLB_Miss_Read>:

	.org  0x060
	// DTLB Miss (Read).
_handle_DTLB_Miss_Read:
	rjmp $
80002460:	c0 08       	rjmp	80002460 <_handle_DTLB_Miss_Read>
	...

80002470 <_handle_DTLB_Miss_Write>:

	.org  0x070
	// DTLB Miss (Write).
_handle_DTLB_Miss_Write:
	rjmp $
80002470:	c0 08       	rjmp	80002470 <_handle_DTLB_Miss_Write>
	...

80002500 <_handle_Supervisor_Call>:

	.org  0x100
	// Supervisor Call.
_handle_Supervisor_Call:
	rjmp $
80002500:	c0 08       	rjmp	80002500 <_handle_Supervisor_Call>
80002502:	d7 03       	nop

80002504 <_int0>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80002504:	30 0c       	mov	r12,0
80002506:	fe b0 fd a9 	rcall	80002058 <_get_interrupt_handler>
8000250a:	58 0c       	cp.w	r12,0
8000250c:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
80002510:	d6 03       	rete

80002512 <_int1>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80002512:	30 1c       	mov	r12,1
80002514:	fe b0 fd a2 	rcall	80002058 <_get_interrupt_handler>
80002518:	58 0c       	cp.w	r12,0
8000251a:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000251e:	d6 03       	rete

80002520 <_int2>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80002520:	30 2c       	mov	r12,2
80002522:	fe b0 fd 9b 	rcall	80002058 <_get_interrupt_handler>
80002526:	58 0c       	cp.w	r12,0
80002528:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000252c:	d6 03       	rete

8000252e <_int3>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
8000252e:	30 3c       	mov	r12,3
80002530:	fe b0 fd 94 	rcall	80002058 <_get_interrupt_handler>
80002534:	58 0c       	cp.w	r12,0
80002536:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000253a:	d6 03       	rete
8000253c:	d7 03       	nop
8000253e:	d7 03       	nop
80002540:	d7 03       	nop
80002542:	d7 03       	nop
80002544:	d7 03       	nop
80002546:	d7 03       	nop
80002548:	d7 03       	nop
8000254a:	d7 03       	nop
8000254c:	d7 03       	nop
8000254e:	d7 03       	nop
80002550:	d7 03       	nop
80002552:	d7 03       	nop
80002554:	d7 03       	nop
80002556:	d7 03       	nop
80002558:	d7 03       	nop
8000255a:	d7 03       	nop
8000255c:	d7 03       	nop
8000255e:	d7 03       	nop
80002560:	d7 03       	nop
80002562:	d7 03       	nop
80002564:	d7 03       	nop
80002566:	d7 03       	nop
80002568:	d7 03       	nop
8000256a:	d7 03       	nop
8000256c:	d7 03       	nop
8000256e:	d7 03       	nop
80002570:	d7 03       	nop
80002572:	d7 03       	nop
80002574:	d7 03       	nop
80002576:	d7 03       	nop
80002578:	d7 03       	nop
8000257a:	d7 03       	nop
8000257c:	d7 03       	nop
8000257e:	d7 03       	nop
80002580:	d7 03       	nop
80002582:	d7 03       	nop
80002584:	d7 03       	nop
80002586:	d7 03       	nop
80002588:	d7 03       	nop
8000258a:	d7 03       	nop
8000258c:	d7 03       	nop
8000258e:	d7 03       	nop
80002590:	d7 03       	nop
80002592:	d7 03       	nop
80002594:	d7 03       	nop
80002596:	d7 03       	nop
80002598:	d7 03       	nop
8000259a:	d7 03       	nop
8000259c:	d7 03       	nop
8000259e:	d7 03       	nop
800025a0:	d7 03       	nop
800025a2:	d7 03       	nop
800025a4:	d7 03       	nop
800025a6:	d7 03       	nop
800025a8:	d7 03       	nop
800025aa:	d7 03       	nop
800025ac:	d7 03       	nop
800025ae:	d7 03       	nop
800025b0:	d7 03       	nop
800025b2:	d7 03       	nop
800025b4:	d7 03       	nop
800025b6:	d7 03       	nop
800025b8:	d7 03       	nop
800025ba:	d7 03       	nop
800025bc:	d7 03       	nop
800025be:	d7 03       	nop
800025c0:	d7 03       	nop
800025c2:	d7 03       	nop
800025c4:	d7 03       	nop
800025c6:	d7 03       	nop
800025c8:	d7 03       	nop
800025ca:	d7 03       	nop
800025cc:	d7 03       	nop
800025ce:	d7 03       	nop
800025d0:	d7 03       	nop
800025d2:	d7 03       	nop
800025d4:	d7 03       	nop
800025d6:	d7 03       	nop
800025d8:	d7 03       	nop
800025da:	d7 03       	nop
800025dc:	d7 03       	nop
800025de:	d7 03       	nop
800025e0:	d7 03       	nop
800025e2:	d7 03       	nop
800025e4:	d7 03       	nop
800025e6:	d7 03       	nop
800025e8:	d7 03       	nop
800025ea:	d7 03       	nop
800025ec:	d7 03       	nop
800025ee:	d7 03       	nop
800025f0:	d7 03       	nop
800025f2:	d7 03       	nop
800025f4:	d7 03       	nop
800025f6:	d7 03       	nop
800025f8:	d7 03       	nop
800025fa:	d7 03       	nop
800025fc:	d7 03       	nop
800025fe:	d7 03       	nop
